const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
require("dotenv").config();

const Cliente = require("../models/Cliente");
const Profissional = require("../models/Profissional"); // Assumindo que voc√™ tenha um modelo Profissional similar
const authMiddleware = require('../middleware/middleware');
router.post("/login", async (req, res) => {
  const { email, senha } = req.body;

  try {
    console.log("üîç Buscando usu√°rio com email:", email);

    let user = await Cliente.findOne({ email }).select('+senha');
    let tipoUsuario = "cliente";

    if (!user) {
      user = await Profissional.findOne({ email }).select('+senha');
      tipoUsuario = "profissional";
    }

    if (!user) {
      console.log("‚ùå Nenhum usu√°rio encontrado com esse email.");
      return res.status(404).json({ message: "Usu√°rio n√£o encontrado." });
    }

    console.log("‚úÖ Usu√°rio encontrado:", user.email, "| Tipo:", tipoUsuario);

    // <-- MUDAN√áA: Usando o m√©todo do modelo para comparar a senha
    // √â mais limpo e encapsula a l√≥gica no modelo.
    const isMatch = await user.comparePassword(senha);
    if (!isMatch) {
      console.log("‚ùå Senha incorreta.");
      return res.status(400).json({ message: "Credenciais inv√°lidas." });
    }

    // ‚úÖ Bloco novo e corrigido

// 1. O payload para o token pode ser simples, contendo apenas o essencial.
const tokenPayload = { id: user.id };
const token = jwt.sign(tokenPayload, process.env.JWT_SECRET, {
  expiresIn: "1h",
});

// 2. Prepara o objeto COMPLETO do usu√°rio para enviar ao frontend.
// Usamos .toObject() para converter o documento do Mongoose em um objeto simples.
const userObject = user.toObject();

// 3. Adiciona o campo 'role' ou 'tipo' que o frontend espera.
// Vamos usar 'role' como padr√£o para diferenciar do 'tipo' de servi√ßo.
userObject.role = tipoUsuario; 

// A senha j√° √© removida pelo seu Schema, mas podemos garantir aqui por seguran√ßa.
delete userObject.senha; 

// 4. Envia o token e o objeto COMPLETO do usu√°rio.
res.status(200).json({ token, user: userObject });

  } catch (error) {
    console.error("üí• Erro no login:", error);
    res.status(500).json({ message: "Erro no servidor." });
  }
});
// ROTA: GET /api/auth/me
// DESCRI√á√ÉO: Pega os dados do usu√°rio logado usando o token enviado no header.
router.get('/me', authMiddleware, (req, res) => {
    // Se o c√≥digo chegou at√© aqui, o middleware j√° validou o token 
    // e anexou o usu√°rio em 'req.user'. N√≥s apenas o retornamos.
    res.status(200).json(req.user);
});

module.exports = router;