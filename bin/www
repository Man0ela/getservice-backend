#!/usr/bin/env node

/**
 * Módulos.
 */
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('pragmapm:server');
var http = require('http');
var mongoose = require('mongoose'); // Importa o mongoose

// Importa os models e dados para o seeding
const Profissional = require('../models/Profissional');
const profissionaisIniciais = require('../data/profissionais');

/**
 * Pega a porta do ambiente e guarda no Express.
 */
var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Cria o servidor HTTP.
 */
var server = http.createServer(app);

/**
 * Conecta ao MongoDB e então inicia o servidor.
 */
const MONGO_URI = process.env.MONGO_URI;
if (!MONGO_URI) {
  console.error('Erro: A variável de ambiente MONGO_URI não está definida.');
  process.exit(1);
}

mongoose.connect(MONGO_URI)
  .then(() => {
    console.log('Conectado ao MongoDB com sucesso!');

    // LÓGICA DE AUTO-SEEDING
    const popularBancoDeDados = async () => {
      try {
        const count = await Profissional.countDocuments();
        if (count === 0) {
          await Profissional.insertMany(profissionaisIniciais);
          console.log('Banco de dados de profissionais populado com dados iniciais!');
        }
      } catch (error) {
        console.error('Erro ao popular o banco de dados:', error);
      }
    };
    // Chama a função e continua após ela terminar
    return popularBancoDeDados();
  })
  .then(() => {
    // Inicia o servidor APÓS conectar e popular o banco
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(err => {
    console.error('Erro fatal ao conectar ou configurar o banco de dados:', err);
    process.exit(1);
  });


/**
 * Funções geradas pelo Express (não precisam de alteração).
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) { return val; }
  if (port >= 0) { return port; }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') { throw error; }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  // Adicionei um console.log para ver a porta mais facilmente
  console.log(`Servidor rodando e ouvindo em: ${bind}`);
}